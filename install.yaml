# Playbook: YAML로 정의. 순서대로 정의된 play 목록 절차.
# Play: task 목록. 특정 host 목록에 대하여 수행
# Task: ansible의 수행 단위. ad-hoc 명령어는 한번에 단일 작업 수행.
# Module: ansible이 실행하는 code 단위. 작업에서 module을 호출함.
# Collection: Module의 집합.

- name: Install Container Runtime
  hosts: all_nodes
  gather_facts: yes
  become: yes

  tasks:
    - name: Disable swap for current session
      shell: swapoff -a

    - name: Disable swap permanently, persist reboots
      lineinfile:
        dest: /etc/fstab
        regexp: swap
        state: absent

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes
        # cache_valid_time: 86400 # 1 day

    - name: Install packages to allow apt to use a repository over HTTPS
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: latest

    - name: Make Docker's official GPG key directory
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Add Docker's official GPG key (set GPG key)
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        keyring: /etc/apt/keyrings/docker.gpg

    - name: print $(dpkg --print-architecture)
      command: dpkg --print-architecture
      register: architecture_info

    - name: print $(lsb_release -cs)
      command: lsb_release -cs
      register: lsb_release_info

    - name: Set up the repository
      apt_repository:
        repo: deb [arch={{ architecture_info.stdout }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ lsb_release_info.stdout }} stable
        state: present
        filename: docker
        mode: 0600

    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: latest

    - name: Enable service docker, and enable persistently
      service:
        name: docker
        enabled: yes

    # https://github.com/containerd/containerd/issues/4581
    - name: Remove config.toml
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted

- name: Install kubeadm
  hosts: all_nodes
  gather_facts: false
  become: yes

  tasks:
    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install packages needed to use the Kubernetes apt repository
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: latest

    - name: Download the Google Cloud public signing key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
        keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg

    - name: Set up Kubernetes apt repository
      apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes
        mode: 0600

    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install kubelet, kubeadm, kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: latest

    - name: Enable service kubelet, and enable persistently
      service:
        name: kubelet
        enabled: yes

- name: Initialize kubeadm
  hosts: masters
  gather_facts: false
  become: yes

  tasks:
    - name: Initialize kubeadm and save result
      shell: kubeadm init | tee kubeadm_initialized
      run_once: true
      register: init_result

    - name: Get initialize result
      debug: msg="{{ init_result }}"

    - name: Create .kube directory
      become: yes
      become_user: "{{ kube_user }}"
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: Copies admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ kube_user }}/.kube/config
        remote_src: yes
        owner: "{{ kube_user }}"
        group: "{{ kube_user }}"
        mode: 0644

    - name: Remove the cache directory.
      become: yes
      become_user: "{{ kube_user }}"
      file:
        path: /home/{{ kube_user }}/.kube/cache
        state: absent

    - name: Enable kubelet
      systemd:
        name: kubelet
        state: restarted

    - name: Get kubectl cluster-info
      become: yes
      become_user: "{{ kube_user }}"
      shell: kubectl cluster-info
      register: get_cluster_info
      until: get_cluster_info is not failed
      retries: 10
      delay: 5

    - name: Print kubectl cluster-info
      debug: msg="{{ get_cluster_info }}"

    - name: Install Pod network add-on (Weave Net)
      become: yes
      become_user: "{{ kube_user }}"
      shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
      register: install_pod_network_result
      until: install_pod_network_result is not failed
      retries: 10
      delay: 5

    - name: Get install pod network result
      debug: msg="{{ install_pod_network_result }}"

    - name: Get the token for joining the nodes with Kuberentes master.
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command

    - name: Print join command
      debug:
        msg: "{{ kubernetes_join_command.stdout_lines }}"

    - name: Copy join command to local file.
      become: no
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="kubernetes_join_command" mode=0644

- name: Join nodes to kubernetes network
  hosts: workers
  gather_facts: false
  become: yes

  tasks:
    - name: Copy join command to worker nodes
      copy:
        src: kubernetes_join_command
        dest: /tmp/kubernetes_join_command
        mode: 0777

    - name: Join the Worker nodes with the master
      command: sh /tmp/kubernetes_join_command
      register: join_result

    - name: Print join result
      debug:
        msg: "{{ join_result.stdout_lines }}"

- name: Configure kubectl command auto-completion.
  hosts: masters
  become: yes
  gather_facts: false

  tasks:
    - name: Configure kubectl command auto-completion
      lineinfile:
        dest: /home/{{ kube_user }}/.bashrc
        line: "source <(kubectl completion bash)"
        insertafter: EOF
